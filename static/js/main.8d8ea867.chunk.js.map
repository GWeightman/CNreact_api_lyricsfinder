{"version":3,"sources":["Components/input.js","App.js","reportWebVitals.js","index.js"],"names":["Input","artist","song","changeHandler1","changeHandler2","getter","loading","lyrics","enter","type","className","placeholder","value","onChange","onKeyDown","onClick","App","useState","setArtist","setSong","setLyrics","setLoading","error","message","setError","a","fetch","response","status","Error","json","data","refresh","window","location","reload","event","target","keyCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wOAgBeA,EAhBD,SAAC,GAAoF,IAAnFC,EAAkF,EAAlFA,OAAQC,EAA0E,EAA1EA,KAAMC,EAAoE,EAApEA,eAAgBC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MACnF,OACI,gCACI,uBAAOC,KAAK,OAAOC,UAAU,UAAUC,YAAY,SAASC,MAAOX,EAAQY,SAAUV,IACrF,uBAAOM,KAAK,OAAOC,UAAU,UAAUC,YAAY,OAAOC,MAAOV,EAAMW,SAAUT,EAAgBU,UAAWN,IAC5G,wBAAQO,QAASV,EAAjB,wBACA,uBACA,uBACCC,EAAU,2CAEX,8BAAMC,QCwDDS,MA9DjB,WACI,MAA4BC,mBAAS,IAArC,mBAAOhB,EAAP,KAAeiB,EAAf,KACA,EAAwBD,mBAAS,IAAjC,mBAAOf,EAAP,KAAaiB,EAAb,KACA,EAA4BF,mBAAS,sBAArC,mBAAOV,EAAP,KAAea,EAAf,KACA,EAA8BH,oBAAS,GAAvC,mBAAOX,EAAP,KAAgBe,EAAhB,KACA,EAA0BJ,mBAAS,CACjCK,OAAO,EACPC,QAAS,KAFX,mBAAOD,EAAP,KAAcE,EAAd,KAaMnB,EAAM,uCAAG,8BAAAoB,EAAA,sEAEXJ,GAAW,GAFA,SAGYK,MAAM,6BAAD,OAA8BzB,EAA9B,YAAwCC,IAHzD,UAIa,OADlByB,EAHK,QAIEC,OAJF,sBAKH,IAAIC,MAAM,eALP,uBAOQF,EAASG,OAPjB,OAOLC,EAPK,OAQXX,EAAUW,EAAKxB,QACfc,GAAW,GATA,kDAWXG,EAAS,CAACF,OAAO,EAAMC,QAAS,KAAMA,UAX3B,0DAAH,qDAqBNS,EAAU,WACdC,OAAOC,SAASC,UAGlB,OAAIb,EAAMA,MAEN,gCACA,6BAAKA,EAAMC,UACX,wBAAQR,QAASiB,EAAjB,wBAKF,gCACE,8CACA,qDACA,kDACA,cAAC,EAAD,CAAO/B,OAAQA,EAAQC,KAAMA,EAAMC,eA9ChB,SAACiC,GACtBlB,EAAUkB,EAAMC,OAAOzB,QA6C8CR,eA1ChD,SAACgC,GACtBjB,EAAQiB,EAAMC,OAAOzB,QAyCgFP,OAAQA,EAAQC,QAASA,EAASC,OAAQA,EAAQC,MAvB3I,SAAC4B,GACQ,IAAjBA,EAAME,SACRjC,OAsBA,wBAAQU,QAASiB,EAAjB,yBCjDOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.8d8ea867.chunk.js","sourcesContent":["const Input = ({artist, song, changeHandler1, changeHandler2, getter, loading, lyrics, enter}) => {\r\n    return(\r\n        <div>\r\n            <input type=\"text\" className=\"UserReq\" placeholder=\"artist\" value={artist} onChange={changeHandler1}/>\r\n            <input type=\"text\" className=\"UserReq\" placeholder=\"song\" value={song} onChange={changeHandler2} onKeyDown={enter}/>\r\n            <button onClick={getter}>get lyrics</button>\r\n            <br/>\r\n            <br/>\r\n            {loading ? <p>loading...</p>\r\n            :\r\n            <pre>{lyrics}</pre>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Input from './Components/input';\n\nfunction App() {\n    const [artist, setArtist] = useState(\"\")\n    const [song, setSong] = useState(\"\")\n    const [lyrics, setLyrics] = useState(\"Lyrics to be found\")\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState({\n      error: false,\n      message: \"\"\n    })\n\n    const changeHandler1 = (event) => {\n      setArtist(event.target.value)\n    }\n\n    const changeHandler2 = (event) => {\n      setSong(event.target.value)\n    }\n\n    const getter = async () => {\n      try {\n        setLoading(true)\n        const response = await fetch(`https://api.lyrics.ovh/v1/${artist}/${song}`)\n        if (response.status !== 200){\n          throw new Error(\"Not Working\")\n        }\n        const data = await response.json()\n        setLyrics(data.lyrics)\n        setLoading(false)\n      } catch (error){\n        setError({error: true, message: error.message})\n      }\n    } \n\n    const enter = (event) =>{\n      if (event.keyCode == 13){\n        getter()\n      }\n    }\n\n    const refresh = () => {\n      window.location.reload()\n    }\n\n    if (error.error){\n      return (\n        <div>\n        <h1>{error.message}</h1>\n        <button onClick={refresh}>Refresh</button>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <h1>Lyric Finder</h1>\n        <p>new line for testing</p>\n        <p>another test line</p>\n        <Input artist={artist} song={song} changeHandler1={changeHandler1} changeHandler2={changeHandler2} getter={getter} loading={loading} lyrics={lyrics} enter={enter}/> \n        <button onClick={refresh}>Refresh</button>\n      </div>\n    )\n  }\n  \n  export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}